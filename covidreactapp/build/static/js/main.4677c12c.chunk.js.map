{"version":3,"sources":["Components/Navbar.js","Pages/Register.js","Pages/login.js","Pages/home.js","Pages/logout.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","toggle","state","status","setState","className","role","aria-label","href","src","width","height","onClick","this","aria-expanded","data-target","aria-hidden","id","to","Component","Register","onSubmit","e","a","preventDefault","email","target","value","password","name","phone","localStorage","setItem","loggedIn","console","log","fetch","headers","method","body","JSON","stringify","response","json","data","onChange","style","fontSize","fontWeight","class","type","placeholder","login","pass","home","logout","App","path","exact","component","Login","Home","Logout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4677c12c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n                status:false\r\n        }\r\n    }\r\n\r\n\r\n    toggle = ()=>{\r\n        if(this.state.status === false){\r\n            this.setState({status:true});\r\n        }else{\r\n            this.setState({status:false})\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n        <div className=\"navbar-brand\">\r\n          <a className=\"navbar-item\" href=\"https://bulma.io\">\r\n            <img src=\"https://bulma.io/images/bulma-logo.png\" width=\"112\" height=\"28\" />\r\n          </a>\r\n      \r\n          <a href=\"#ToggleNavbar\" role=\"button\" onClick={this.toggle} className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n            <span aria-hidden=\"true\"></span>\r\n            <span aria-hidden=\"true\"></span>\r\n            <span aria-hidden=\"true\"></span>\r\n          </a>\r\n        </div>\r\n      \r\n        <div id=\"navbarBasicExample\" className={this.state.status === true ? 'navbar-menu is-active':\"navbar-menu\"}>\r\n          <div className=\"navbar-start\">\r\n            <Link to='/home' className=\"navbar-item\" href=\"#Home\">\r\n              Home\r\n            </Link>\r\n      \r\n            <a className=\"navbar-item\" href=\"#services\">\r\n              Services\r\n            </a>\r\n      \r\n            <div className=\"navbar-item has-dropdown is-hoverable\">\r\n              <Link to='/' className=\"navbar-link\" href=\"#login\">\r\n                Login\r\n              </Link>\r\n      \r\n              <div className=\"navbar-dropdown\">\r\n                <a className=\"navbar-item\">\r\n                  About\r\n                </a>\r\n                <a className=\"navbar-item\">\r\n                  Jobs\r\n                </a>\r\n                <a className=\"navbar-item\">\r\n                  Contact\r\n                </a>\r\n                <hr className=\"navbar-divider\" />\r\n                <a className=\"navbar-item\">\r\n                  Report an issue\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n      \r\n          <div className=\"navbar-end\">\r\n            <div className=\"navbar-item\">\r\n              <div className=\"buttons\">\r\n                <a className=\"button is-primary\">\r\n                  <strong>Sign up</strong>\r\n                </a>\r\n                <a className=\"button is-light\">\r\n                  Log in\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n                name:'',\r\n                email:'',\r\n                phone:'',\r\n                password:''\r\n        }\r\n    }\r\n    onSubmit = async (e)=>{\r\n        e.preventDefault();\r\n\r\n        let email = e.target.email.value;\r\n        let password = e.target.password.value;\r\n        let name = e.target.name.value;\r\n        let phone = e.target.phone.value;\r\n\r\n\r\n        if(email == 'A' && password == 'A')\r\n        {\r\n\r\n            localStorage.setItem(\"token\",\"ygfehbkerbdjlobjsdgfioaejknfdekjrdgn\");\r\n\r\n            this.setState({loggedIn:true})\r\n        }\r\n\r\n        console.log(email,password,phone,name)\r\n\r\n        let response = await fetch('/api/users/register',{\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method:\"POST\",\r\n            body:JSON.stringify({\r\n                name:name,\r\n                email:email,\r\n                phone:phone,\r\n                password:password\r\n            })\r\n        });\r\n        let data = await response.json()\r\n        console.log(data) \r\n\r\n\r\n        \r\n    }\r\n    onChange = (e)=>{\r\n       \r\n\r\n        this.setState(\r\n          {  [e.target.name]:e.target.value}\r\n        )\r\n    }\r\n    render() {\r\n        return (<form onSubmit={this.onSubmit}>\r\n            <center style={{fontSize:'50px',fontWeight:200}}>Register Form</center>\r\n            <div class=\"field\">\r\n                <label class=\"label\">Name</label>\r\n                <div class=\"control\">\r\n                    <input id='name' name='name' class=\"input\" type=\"text\" placeholder=\"Enter your Full Name\" value={this.state.name} onChange={this.onChange} />\r\n                </div>\r\n                {/* <p class=\"help\">This is a help text</p> */}\r\n            </div>\r\n\r\n            \r\n            <div class=\"field\">\r\n                <label class=\"label\">Email</label>\r\n                <div class=\"control\">\r\n                    <input id='email' name='email' class=\"input\" type=\"email\" placeholder=\"Email ID\" value={this.state.email} onChange={this.onChange} />\r\n                </div>\r\n                {/* <p class=\"help\">This is a help text</p> */}\r\n            </div>\r\n\r\n            <div class=\"field\">\r\n                <label class=\"label\">Phone</label>\r\n                <div class=\"control\">\r\n                    <input id='phone' name='phone' class=\"input\" type=\"number\" placeholder=\"Enter your Phone\" value={this.state.phone} onChange={this.onChange} />\r\n                </div>\r\n                <p class=\"help\">An OTP will be sent to given mobile number</p>\r\n            </div>\r\n\r\n                \r\n            <div class=\"field\">\r\n                <label class=\"label\">Password</label>\r\n                <div class=\"control\">\r\n                    <input id='password' name='password' class=\"input\" type=\"password\" placeholder=\"Password\"  value={this.state.password} onChange={this.onChange}  />\r\n                </div>\r\n                {/* <p class=\"help\">This is a help t/ext</p> */}\r\n            </div>\r\n            <Link to='/'>Already have an Account</Link>\r\n                \r\n                <div class=\"control\">\r\n                <center><button class=\"button is-primary\">Submit</button></center>\r\n                </div>\r\n        </form>)\r\n    }\r\n}\r\n\r\nexport default Register\r\n","import React, { Component } from 'react'\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { get } from 'mongoose';\r\nimport Register from './Register';\r\n\r\nclass login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n\r\n        let loggedIn = false;\r\n\r\n        this.state = {\r\n                email:'',\r\n                password:'',\r\n                loggedIn\r\n        }\r\n    }\r\n\r\n     onSubmit = async (e)=>{\r\n        e.preventDefault();\r\n\r\n        let email = e.target.email.value;\r\n        let password = e.target.password.value;\r\n\r\n        if(email == 'A' && password == 'A')\r\n        {\r\n\r\n            localStorage.setItem(\"token\",\"ygfehbkerbdjlobjsdgfioaejknfdekjrdgn\");\r\n\r\n            this.setState({loggedIn:true})\r\n        }\r\n\r\n\r\n\r\n        let response = await fetch('http://localhost:5000/api/users/register',{\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method:\"POST\",\r\n            body:JSON.stringify({\r\n                email:\"pushpendj@gmail.com\",\r\n                pass:\"uhvbjzkbvnrd\",\r\n                name:\"SIEUJFK\"\r\n            })\r\n        });\r\n        let data = await response.json()\r\n        console.log(data) \r\n\r\n\r\n        \r\n    }\r\n    onChange = (e)=>{\r\n       \r\n\r\n        this.setState(\r\n          {  [e.target.name]:e.target.value}\r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        if(this.state.loggedIn === true){\r\n            return <Redirect to='/home' />\r\n        }else{\r\n            return (<span>\r\n                <form onSubmit={this.onSubmit}>\r\n                <center style={{fontSize:'50px',fontWeight:200}}>Login Form</center>\r\n                <div class=\"field\">\r\n                    <label class=\"label\">Email</label>\r\n                    <div class=\"control\">\r\n                        <input id='email' name='email' class=\"input\" type=\"text\" placeholder=\"Email ID\" value={this.state.email} onChange={this.onChange} />\r\n                    </div>\r\n                    {/* <p class=\"help\">This is a help text</p> */}\r\n                    </div>\r\n    \r\n                    \r\n                <div class=\"field\">\r\n                    <label class=\"label\">Password</label>\r\n                    <div class=\"control\">\r\n                        <input id='password' name='password' class=\"input\" type=\"password\" placeholder=\"Password\"  value={this.state.password} onChange={this.onChange}  />\r\n                    </div>\r\n                    {/* <p class=\"help\">This is a help t/ext</p> */}\r\n                    </div>\r\n                        <Link to='/register'>Create New Account</Link>\r\n                    <div class=\"control\">\r\n   <center> <button class=\"button is-primary\">Submit</button></center>\r\n    </div>\r\n            </form> \r\n            <hr />\r\n          \r\n            </span>);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n}\r\n\r\nexport default login\r\n","import React, { Component } from 'react'\r\n\r\nclass home extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n                 \r\n        }\r\n    }\r\n \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Home Page\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default home\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass logout extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n                 \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Logout\r\n\r\n                <Link to='/'>Go To Login Page</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default logout\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Login from './Pages/login';\nimport Home from './Pages/home';\nimport Logout from './Pages/logout';\n\nimport {BrowserRouter,Switch,Route} from 'react-router-dom'\nimport Register from './Pages/Register';\nfunction App(){\n  return(<span>\n    \n    \n\n    <BrowserRouter>\n    <Navbar />\n      <Switch>\n        <Route path='/' exact component={Login} />\n        <Route path='/register' component={Register} />\n        <Route path='/home' exact component={Home} />\n        <Route path='/logout' component={Logout} />\n      </Switch>\n    </BrowserRouter>\n  </span>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}